alias ls='ls -G'
alias rmac="openssl rand -hex 6 | sed 's/\(..\)/\1:/g; s/.$//'"
alias setmac="sudo ifconfig en0 ether"
alias ut='date +%s'
alias insecure_chrome='/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --disable-web-security'

function note() {
        # TODO: Add a template
        vim "$HOME/notes/$1.note"
}
_note() {
        local context
        notes=$(find ~/notes | tail -n +2 | xargs basename | cut -d '.' -f 1)
        _arguments "1:notes:($notes)"
        return 0
}
compdef _note note

function pb() {
        cat $1 | pbcopy
}

function ipinfo() {
	curl "ipinfo.io/$1"
	echo
}

function pw() {
        openssl rand -base64 ${1:-48}
}

function docker_clean_everything() {
        # Stop All containers
        docker stop $(docker ps -a -q)
        # Delete all containers
        docker rm $(docker ps -a -q)
        # Delete all images
        docker rmi $(docker images -q)
}

function ta() {
        LAST_NUMBER=$(tail -n1 ~/notes/tasks.note  | cut -d ')' -f 1)
        NEW_NUMBER=$(echo "${LAST_NUMBER:-0} + 1" | bc)
	echo "${NEW_NUMBER}) $@" >> ~/notes/tasks.note
}
function tremove() {
        sed -i '' "/^${1})/d" ~/notes/tasks.note
}
alias ts='cat ~/notes/tasks.note'

alias dbuild='docker build -t `basename $PWD` .'

alias clean_branches='git branch --merged master | grep -v "\* master" | xargs -n 1 git branch -d'

# Quickly navigate to repositories
function r() {
        orgs=$(find ~/src -maxdepth 1 -type d | tail -n +2 | xargs basename | sort)
        # TODO: ZSH for loops are different and don't break on spaces/newlines
        for org in $orgs; do
                cd $HOME/src/${org}/${1} 2>/dev/null
                if [ $? -eq 0 ]; then
                        return 0
                fi
        done
}

_r() {
        local context
        repos=$(find ~/src -maxdepth 2 -type d | cut -d '/' -f 6 | sort | uniq | tail -n +2 | tr '\n' ' ')
        _arguments "1:repo:($repos)"
        return 0
}
compdef _r r

function udp() {
        addr=$(echo $1 | cut -d ':' -f 1)
        addr=${addr:-localhost}
        port=$(echo $1 | cut -d ':' -f 2)
        echo -n $2 > /dev/udp/${addr}/${port}
}

function resync_fork() {
        git stash
        git checkout master
        git fetch upstream
        git merge upstream/master
        git push
}

